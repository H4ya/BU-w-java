//Admin: name "Saleh Ahmed", phone "05432101234", password "Sx.1234", username "Saleh22", email "salehr224@gmail.com"

import java.util.Random;
import java.util.Scanner;

public class BookingSystem {

    static String userName, userPhone, userPassword;
    public static final Admin admin = new Admin();
    public static int choice;
    public static Scanner input = new Scanner(System.in);

    static String main_menu = "Please choose which system to enter\n" +
            "1- [ Admin ] \n" +
            "2- [ Guest ]\n" +
            "3- [ Exit  ]\n" +
            "Your Choice: ";

    static String admin_menu = "\t1- [ Show statistics  ]\n" +
            "\t2- [ View bookings    ]\n" +
            "\t3- [ Delete a booking ]\n" +
            "\t4- [ Edit a booking   ]\n" +
            "\t5- [ Display guest information ]\n" +
            "\t6- [ Exit ]\n" +
            "\tYour Choice: ";

    static String guest_menu = "\n\t*** Welcome to Guest system ***\n" +
            "\t1- [ Add booking  ]\n" +
            "\t2- [ View booking ]\n" +
            "\t3- [ Exit ]\n" +
            "\tYour Choice: ";

    public static boolean terminate = false;

    public static void main(String[] args) {
        admin.guests = new Guest[Guest.MAX_GUEST_NUMBER];
        admin.bookings = new Booking[Booking.MAX_BOOKING_NUMBER];
        System.out.println("Welcome to our hotel system.");

        while (!terminate) {
            int choice = 0;
            System.out.print(main_menu);
            choice = input.nextInt();
            switch (choice) {
                case 1: // will be entered if the user choose admin
                    input.nextLine();
                    System.out.println("Enter your username: ");
                    userName = input.nextLine().trim();
                    System.out.println("Enter Password: ");
                    userPassword = input.next().trim();
                    ;
                    System.out.println("Enter Phone Number: ");
                    userPhone = input.next().trim();
                    ;
                    Admin admin = new Admin();
                    if (admin.checkUser(admin, admin, userName, userPassword, userPhone)) {
                        // System.out.println();
                        admin_System();
                    } else {
                        System.out.println("Access Denied.");
                    }
                    break;
                case 2: // will be entered if the user choose guest
                    guest_System();
                    break;
                case 3: // will be entered if the user choose to exit the program
                    System.out.println("Thank you for using our hotel system.");
                    terminate = true;
                    break;

                default:
                    System.out.println("Invalid input. Please try again.");
            }
        }
    }

    static void admin_System() {
        System.out.println("*** Welcome to Admin system ***");
        boolean done = false;
        while (!done) {
            String bookingID = "";
            System.out.print(admin_menu);
            choice = input.nextInt();
            input.nextLine();

            switch (choice) {
                case 1: // show statistics of the hotel
                    admin.showStatistics();
                    break;
                case 2: // view bookings
                    admin.viewBookings();
                    break;
                case 3: // delete booking
                    System.out.print("Enter the booking ID to delete: ");
                    bookingID = input.next();
                    admin.delBooking(bookingID);
                    break;
                case 4: // edit booking
                    System.out.print("Enter the booking ID to edit it: ");
                    bookingID = input.next();
                    admin.editBooking(bookingID);
                    break;
                case 5: // display guest information by searching there name
                    System.out.println("Display guest information");
                    if (Guest.guestCount > 0) {
                        System.out.print("Enter the guest name: ");
                        userName = input.nextLine();
                        boolean found = false;
                        for (int i = 0; i < Guest.guestCount; i++) {
                            if (admin.guests[i].name.equalsIgnoreCase(userName)) {
                                admin.displayGuestInfo(admin.guests[i]); // a method to print the guest name, age, phone
                                                                         // number and family status
                                found = true; // a flag to display a message if the guest is not found
                                break;
                            }

                        }
                        if (!found) {
                            System.out.println("Guest not found.");
                        }
                    } else {
                        System.out.println("No guests found. Please add a guest first.");
                    }
                    break;
                case 6: // entered if the admin choose to exit
                    System.out.println("Exiting Admin system...");
                    done = true; // updating a flag to exit the loop
                    break;
                default:
                    System.out.println("Invalid input. Please enter a valid option.");
            }
        }
    }

    static void guest_System() {

        choice = 0;
        int age;
        boolean familyStatus = false; // false for single, true for married
        int intFamilyStatus;

        do { // a loop to make sure that the user enter the correct information, it will run
             // as least once
            Guest.rightInfo = true; // a flag to check if all information are correct
            input.nextLine();
            System.out.print("\tEnter your name: ");
            userName = input.nextLine().trim();
            System.out.print("\tEnter your age: ");
            age = input.nextInt();
            System.out.print("\tEnter your phone number: ");
            userPhone = input.next().trim();
            System.out.print("\tEnter your password: ");
            userPassword = input.next().trim();
            System.out.print("\tDo you have family ? 1 for true or 0 for false: ");
            intFamilyStatus = input.nextInt();
            if (intFamilyStatus == 1) {
                familyStatus = true;
            } else if (intFamilyStatus == 0) {
                familyStatus = false;
            } else {
                System.out.println("Invalid input. Please enter 1 or 0.");

            }
            if (!Guest.rightInfo) {
                System.out.println("Please enter your information correctly.");
            }

        } while (!Guest.rightInfo);

        // add the guest to the array of guests if everything is correct
        admin.guests[Guest.guestCount] = new Guest();
        admin.guests[Guest.guestCount].name = userName;
        admin.guests[Guest.guestCount].setAge(age);
        admin.guests[Guest.guestCount].setPassword(userPassword);
        admin.guests[Guest.guestCount].setPhoneNo(userPhone);
        admin.guests[Guest.guestCount].familyStatus = familyStatus;
        if (User.rightInfo) { // check if the information is correct to add the guest
            System.out.printf("Guest %s was added successfully.\n", admin.guests[Guest.guestCount].name);
            Guest.guestCount++;// Increase the guest count by 1 to add the next guest to the next index
        } else {
            System.out.println("Please enter your information correctly.");
        }
        while (true) {
            input.nextLine();
            System.out.print(guest_menu);
            choice = input.nextInt();
            input.nextLine();
            if (choice == 3) {
                // exit the Guest System
                System.out.println("Exiting Guest system...");
                break;
            }
            System.out.println("Please verify your information to access the system.");
            System.out.println("Enter your name:");
            userName = input.nextLine();
            System.out.println("Enter your phone number:");
            userPhone = input.next();
            System.out.println("Enter your password:");
            userPassword = input.next();

            // check the guest across the guests array using checkUser method
            Guest guest = new Guest();
            if (guest.checkUser(admin, guest, userName, userPassword, userPhone)) {
                System.out.println("Welcome " + userName + "!"); // print a welcome message if the user is found
            } else {
                System.out.println("Access Denied."); // print a message if the user is not found and terminate the loop
                break;
            }
            switch (choice) {
                case 1: // Entered if the user choose to add a booking
                    admin.guests[Guest.guestCount].addBooking(admin);
                    break;
                case 2: // view the guest booking
                    if (Guest.guestCount > 0 && Booking.bookingCount > 0) {
                        System.out.print("\tEnter booking ID: ");
                        String bookingID = input.next();
                        guest.viewBooking(admin, bookingID);
                    } else {
                        System.out.println("\tNo guest found.");
                    }
                    break;
                default:
                    System.out.println("Invalid input. Please enter a valid option.");
            }
        }
    }
}

class User {
    public static boolean rightInfo = true;
    public String name;
    private String phoneNumber;
    private String password;

    // default Constructor
    public User() {
    }

    // parametrized Constructor
    public User(String name, String phoneNumber, String password) {
        this.name = name;
        setPhoneNo(phoneNumber);
        setPassword(password);
    }

    // Method to check if the user is allowed to enter
    public boolean checkUser(Admin admin, User user, String userName, String userPassword, String userPhone) {
        if (user instanceof Admin) { // check if the user is an admin to confirm his specified identity
            if (userName.equalsIgnoreCase(admin.getUserName()) && userPassword.equals(admin.getPassword())) {
                return true;
            } else {
                return false;
            }
        } else { // if the user is a guest to search him across the guests array then check the
                 // name, password, and phone number
            for (int i = 0; i < Guest.guestCount; i++) {
                if (userName.equalsIgnoreCase(admin.guests[i].name)
                        && userPassword.equals(admin.guests[i].getPassword())
                        && userPhone.equals(admin.guests[i].getPhoneNo())) {
                    return true;
                }
            }
            return false; // return false if the guest is not found across the array
        }
    }

    // Getter for password
    public String getPassword() {
        return password;
    }

    // Setter for password
    public void setPassword(String password) {
        // if (password.matches(".*[._].*")) {
        if (password.matches("[a-zA-Z0-9_.]{7,}")) {
            this.password = password;
        } else {
            rightInfo = false;
            System.out.println(
                    "Password is invalid: it must be :\n7 characters At least.\nContain only Capital and Small English characters.\nnumbers.\nAt least one dot '.' or underscore '_' .");
        }
    }

    // Getter for phone number
    public String getPhoneNo() {
        return phoneNumber;
    }

    // Setter for phone number with validation for 10 digits
    public void setPhoneNo(String phoneNumber) {
        if (phoneNumber.matches("05[0-9]{8}")) {
            // make sure that the number start with 05 and contain exactly 10 digits
            this.phoneNumber = phoneNumber;
        } else {
            rightInfo = false;
            System.out.println("Invalid phone number: phone must contain exactly 10 digits starting with 05");
        }
    }
}

class Guest extends User {

    private int age;
    public boolean familyStatus;
    public static final int MAX_GUEST_NUMBER = 100;
    public static int guestCount = 0;

    // default constructor
    public Guest() {
    }

    public Guest(String name, String phoneNo, String password, int age, boolean familyStatus) {
        super(name, phoneNo, password);
        this.age = age;
        this.familyStatus = familyStatus;
    }

    // getter and setter for age
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        if (age >= 18) {
            this.age = age;
        } else {
            rightInfo = false;
            System.out.println("You must be 18 or older to book a room.");
        }
    }

    public void addBooking(Admin admin) {
        Scanner input = new Scanner(System.in);
        System.out.println("Choose room type:\n1- Family Apartment\n2- Single Apartment");
        int roomChoice = input.nextInt();
        System.out.print("Enter number of days: ");
        int days = input.nextInt();
        double price;

        if (roomChoice == 1) {
            FamilyApartment newBooking = new FamilyApartment();
            System.out.print("Enter number of people: ");
            int peopleNo = input.nextInt();
            newBooking.setPeopleNo(peopleNo);
            price = newBooking.calculatePrice(peopleNo);
            admin.bookings[Booking.bookingCount] = newBooking;
        } else if (roomChoice == 2) {
            SingleApartment newBooking = new SingleApartment();
            System.out.print("Include buffet? (true/false): ");
            newBooking.setBuffetIncluded(input.nextBoolean());
            System.out.print("Include view? (true/false): ");
            newBooking.setRoomWithView(input.nextBoolean());
            price = newBooking.calculatePrice(newBooking.getBuffetIncluded(), newBooking.getRoomWithView());
            admin.bookings[Booking.bookingCount] = newBooking;
        } else {
            System.out.println("Invalid booking type. Please try again.");
            return;
        }
        admin.bookings[Booking.bookingCount].setBookingID(getPhoneNo());
        admin.bookings[Booking.bookingCount].setAmountOfDays(days);
        System.out.print("Enter the visit month: ");
        int month = input.nextInt();
        System.out.print("Enter the visit day: ");
        int day = input.nextInt();
        if (month > 0 && month < 13 && day > 0 && day < 30) {
            admin.bookings[Booking.bookingCount].month = month;
            admin.bookings[Booking.bookingCount].day = day;

        } else {
            System.out.println("Invalid date. Please try again.");
            return;
        }

        System.out.println("Booking added successfully with price: " + price);
        System.out.println("Proceed to payment...");
        System.out.println("Choose payment method:\n  1-Credit Card\n  2-Cash");
        int paymentChoice = input.nextInt();
        admin.bookings[Booking.bookingCount].setPayment(paymentChoice, price);

    }

    public void viewBooking(Admin admin, String bookingID) {
        if (Booking.bookingCount > 0) {
            for (int i = 0; i < Guest.guestCount; i++) {
                if (admin.bookings[i].getBookingID().equals(bookingID)) {
                    Booking booking = admin.bookings[i]; // rename the found booking to make it more readable
                    System.out.println("Booking Details:");
                    System.out.println("Booking ID: " + booking.getBookingID());
                    System.out.println("Room Number: " + booking.getRoomNo());
                    System.out.println("Guest Name: " + booking.getGuest().name);
                    System.out.println("Amount of Days: " + booking.getAmountOfDays());
                    System.out.println("Booking Date: 2024/" + booking.month + "/" + booking.day);
                    System.out.println("Amount: " + booking.getPayment().getAmount());
                    return;
                }
                System.out.println("The booking with ID (" + bookingID + ") does not exist.");

            }
        }
    }
}

class Admin extends User {
    private String userName = "Saleh22";
    private String email = "salehr224@gmail.com";
    public Booking[] bookings = new Booking[Booking.MAX_BOOKING_NUMBER];
    public Guest[] guests = new Guest[Guest.MAX_GUEST_NUMBER];

    Admin() {
        super("Saleh Ahmed", "0543210123", "Sx.1234");
    }

    public String getUserName() {
        return userName;
    }

    public String getEmail() {
        return email;
    }

    public void showStatistics() { // this method will show the statistics of the hotel by taking the counts of the
                                   // bookings and the type of bookings and calculate the rate of each type.
        String commonBookingType = "";
        double rate = 0.0;
        System.out.println("Total Bookings: " + Booking.bookingCount);
        System.out.println("Total Number of Single type Bookings: " + SingleApartment.countSingleBookings);
        System.out.println("Total Number of Family type Bookings: " + FamilyApartment.countFamilyBookings);
        double familyBookingRate = (double) FamilyApartment.countFamilyBookings / Booking.bookingCount * 100;
        double singleBookingRate = (double) SingleApartment.countSingleBookings / Booking.bookingCount * 100;
        commonBookingType = (FamilyApartment.countFamilyBookings > SingleApartment.countSingleBookings)
                ? "Family bookings"
                : "Single bookings";
        rate = (FamilyApartment.countFamilyBookings > SingleApartment.countSingleBookings) ? familyBookingRate
                : singleBookingRate;
        System.out.printf("The common type of booking in our hotel is %s with %%.2f% rate \n", commonBookingType, rate);
    }

    public void viewBookings() { // this method will show all the bookings in the hotel
        if (Booking.bookingCount <= 0) {
            System.out.println("System has no saved bookings currently.");// print a message if there are no bookings
                                                                          // there are no bookings
            return;
        }
        System.out.println("List of all bookings:");
        for (int i = 0; i < Booking.bookingCount; i++) {
            Booking booking = bookings[i];
            System.out.println("Booking Details:");
            System.out.println("Booking ID: " + booking.getBookingID());
            System.out.println("Room Number: " + booking.getRoomNo());
            System.out.println("Guest Name: " + booking.getGuest().name);
            System.out.println("Amount of Days: " + booking.getAmountOfDays());
            System.out.println("Booking Date: 2024/" + booking.month + "/" + booking.day);
        }
    }

    public void delBooking(String bookingID) {
        if (Booking.bookingCount <= 0) {
            System.out.println("System has no saved bookings currently.");// print a message if there are no bookings
                                                                          // there are no bookings
            return;
        }
        for (int i = 0; i < Booking.bookingCount; i++) {
            if (bookings[i].getBookingID().equals(bookingID)) {
                bookings[i] = bookings[--Booking.bookingCount];// assign the last booking to the deleted one
                                                               // then
                                                               // decrease the booking number
                bookings[Booking.bookingCount] = null;
                System.out.println("Booking with ID (" + bookingID + ") has been deleted.");
                return;
            }
        }
        System.out.println("Booking with ID (" + bookingID + ") not found.");// print a message if the a booking with
                                                                             // that ID is not found
    }

    public void editBooking(String bookingID) {
        if (Booking.bookingCount <= 0) {
            System.out.println("System has no saved bookings currently.");// print a message if there are no bookings
                                                                          // there are no bookings
            return;
        }
        Scanner input = new Scanner(System.in);
        for (int i = 0; i < Booking.bookingCount; i++) {        // loop through the bookings array
            if (bookings[i].getBookingID().equals(bookingID)) { // check if the booking ID is equal to the
                                                                // entered ID
                System.out.print("Enter new amount of days: ");// ask the user to enter the new information and
                                                                // update it
                int newAmountOfDays = input.nextInt();
                bookings[i].setAmountOfDays(newAmountOfDays);
                System.out.print("Enter the visit month: ");
                int newMonth = input.nextInt();
                System.out.print("Enter the visit day: ");
                int newDay = input.nextInt();
                if (newMonth > 0 && newMonth < 13 && newDay > 0 && newDay < 30) {
                    bookings[i].month = newMonth;
                    bookings[i].day = newDay;
                } else {
                    System.out.println("Invalid date. Please try again.");
                    return;
                }
                System.out.println("Booking with ID (" + bookingID + ") has been updated."); // print a message to
                                                                                             // confirm the update
                return;
            }
        }
        System.out.println("Booking with ID (" + bookingID + ") not found."); // print a message if the booking ID
                                                                              // is not found
    }

    public void displayGuestInfo(Guest guest) { // a method to print all information of the guest

        System.out.println("Guest Information:");
        System.out.println("Name: " + guest.name);
        System.out.println("Age: " + guest.getAge());
        System.out.println("Family Status: " + (guest.familyStatus ? "Family booking" : "Single booking"));
        System.out.println("Phone Number: " + guest.getPhoneNo());
    }
}

class Booking {

    private int amountOfDays;
    private int roomNo;
    public int month;
    public int day;
    private String bookingID;
    private Guest guest;
    public static final int MAX_BOOKING_NUMBER = 100;
    public static int bookingCount = 0;
    private Payment payment;

    public Booking() {
    }

    public void assignRoomNo(int peopleNo) {
        this.roomNo = (peopleNo == 1) ? new Random().nextInt(151) : new Random().nextInt(151) + 150;
        System.out.println("Assigned Room Number: " + this.roomNo);
    }

    public int getRoomNo() {
        return roomNo;
    }

    // getter and setter for the amount of days
    public int getAmountOfDays() {
        return amountOfDays;
    }

    public void setAmountOfDays(int days) {
        this.amountOfDays = days;
    }

    // getter and setter for the payment
    public Payment getPayment() {
        return payment;
    }

    public void setPayment(int paymentChoice, double price) {
        Scanner input = new Scanner(System.in);
        while (paymentChoice != 1 && paymentChoice != 2) {
            System.out.println("Invalid input. Please try again.");
            System.out.println("Choose payment method:\n  1-Credit Card\n  2-Cash");
            paymentChoice = input.nextInt();
        }
        if (paymentChoice == 1) {
            CreditCard payment = new CreditCard();
            System.out.print("Enter card number: ");
            payment.setCardNo(input.next());
            System.out.print("Enter card password: ");
            payment.setCardPassword(input.next());
            payment.calcAmount(price);
            payment.message();
            this.payment = payment;

        } else if (paymentChoice == 2) {
            Cash payment = new Cash();
            payment.calcAmount(price);
            payment.setDueDate(this.day, this.month);
            payment.message();
            this.payment = payment;

        }
    }

    // getter and setter for the booking ID
    public String getBookingID() {
        return bookingID;
    }

    // set the ID using middle 3 digits from the guest phone number and 4 random
    // digits
    public void setBookingID(String phoneNo) {
        String randomDigits = "" + (new Random().nextInt(9001) + 999);
        this.bookingID = phoneNo.substring(3, 7) + randomDigits;
    }

    public Guest getGuest() {
        return guest;
    }

}

class FamilyApartment extends Booking {
    private int peopleNo;
    public static int countFamilyBookings = 0;

    // Default constructor
    public FamilyApartment() {
        countFamilyBookings++;
        bookingCount++;
    }

    // Parameterized constructor
    public FamilyApartment(int days, Guest guest, int peopleNo) {
        this(); // call the default constructor to increase the count of family bookings and
                // total bookings
        setPeopleNo(peopleNo);
        assignRoomNo(peopleNo);
        setBookingID(guest.getPhoneNo());
        setAmountOfDays(days);
        this.peopleNo = peopleNo;

    }

    // Getter and setter for number of people
    public int getPeopleNo() {
        return peopleNo;
    }

    public void setPeopleNo(int peopleNo) {
        while (true) {
            if (peopleNo <= 11 && peopleNo > 0) {
                this.peopleNo = peopleNo;
                break;
            } else {
                System.out.println("Invalid number of people for one booking, max is 11 min is 1");
                continue;
            }
        }
    }

    // Method to calculate price for family bookings
    public double calculatePrice(int peopleNo) {
        double result = (250 * peopleNo) * this.getAmountOfDays(); // default value for person per day =200 +50 for
                                                                   // buffet multiply it with the amount of days
        return result - result * (15.0 / 100.0);// this code gives %15 discount for families
        // this price include the buffet only

    }

    // Method to return the number of beds
    public int bedsNo() {
        int queenBeds, singleBeds;
        Scanner input = new Scanner(System.in);
        while (true) {
            System.out.println("How many Queen size bed are needed? (Maximum is 3): ");

            queenBeds = input.nextInt();
            System.out.println("How many single size bed are needed? (Maximum is 5): ");
            singleBeds = input.nextInt();

            if (queenBeds <= 3 && singleBeds <= 5) {
                break;
            } else {
                System.out.println("Invalid numbers, please try again");
                continue;
            }
        }
        return queenBeds + singleBeds;
    }
}

class SingleApartment extends Booking {

    // Default constructor
    public SingleApartment() {
        countSingleBookings++;
        bookingCount++;
    }

    // Parameterized constructor
    public SingleApartment(int days, boolean buffetIncluded, boolean roomWithView) {
        this(); // call the default constructor to increase the count of single bookings and
                // total bookings
        this.buffetIncluded = buffetIncluded;
        this.roomWithView = roomWithView;
    }

    private boolean buffetIncluded; // adds 50 Riyal per day for the price
    private boolean roomWithView; // adds 50 Riyal for the total price
    public static int countSingleBookings = 0;

    // Getter and Setter for buffetIncluded
    public boolean getBuffetIncluded() {
        return buffetIncluded;
    }

    public void setBuffetIncluded(boolean buffetIncluded) {
        this.buffetIncluded = buffetIncluded;
    }

    // Getter and Setter for roomWithView
    public boolean getRoomWithView() {
        return roomWithView;
    }

    public void setRoomWithView(boolean roomWithView) {
        this.roomWithView = roomWithView;
    }

    // Method to calculate price for single bookings
    public double calculatePrice(boolean buffet, boolean viewIncluded) {
        double result = 200;// default value for person per day
        return result - result * (15.0 / 100.0);// this code gives %15 discount for families
        // this price include the buffet only
    }

    // Method to show included options
    public double showIncludedOptions(String bookingID, boolean buffet, boolean viewIncluded) {
        // Implement logic to display and add options to the price
        return 0.0;
    }
}

class Payment {
    private double amount;
    private String dateOfPayment;

    // Default constructor
    public Payment() {
    }

    // Constructor with parameters
    public Payment(double amount, String dateOfPayment) {
        this.amount = amount;
        this.dateOfPayment = dateOfPayment;
    }

    // Getter for amount
    public double getAmount() {
        return amount;
    }

    // Method to calculate and return the amount
    public double calcAmount(double amount) {
        this.amount = amount;
        return this.amount;
    }

    // Getter for the date Of Payment
    public String getDate() {
        return dateOfPayment;
    }

    // Setter for dateOfPayment
    public void setDate(int month, int day) {
        this.dateOfPayment = month + "/" + day;
    }
}

class CreditCard extends Payment {
    private String cardNo;
    private String cardPassword;

    // Default constructor
    public CreditCard() {
    }

    // Parameterized constructor
    public CreditCard(double amount, String dateOfPayment, String cardNo, String cardPassword) {
        calcAmount(amount);
        this.cardNo = cardNo;
        this.cardPassword = cardPassword;
    }

    // Getter and setter for cardNo
    public String getCardNo() {
        return cardNo;
    }

    public void setCardNo(String cardNo) {
        if (cardNo.matches("[0-9]{16}")) {// check if the card number contains exactly 16 digits
            this.cardNo = cardNo;
        } else {
            System.out.println("Invalid card number");
        }
    }

    // Getter and setter for cardPassword
    public String getCardPassword() {
        return cardPassword;
    }

    public void setCardPassword(String cardPassword) {
        this.cardPassword = cardPassword;
    }

    // Method to display a message
    public void message() {
        System.out.println("Payment processed using Credit Card ending in " + cardNo.substring(cardNo.length() - 4));
    }
}

class Cash extends Payment {
    private String paymentDueDate;

    // Default constructor
    public Cash() {
    }

    // Parameterized constructor
    public Cash(double amount) {
        calcAmount(amount);
    }

    // Setter for paymentDueDate
    public void setDueDate(int day, int month) {
        this.paymentDueDate = month + "/" + day;
    }

    // Getter for paymentDueDate
    public String getDueDate() {
        return paymentDueDate;
    }

    // Method to display a message related to the cash payment
    public void message() {
        System.out.println("Cash payment is due on | " + this.paymentDueDate
                + " |. Please make sure to pay on time in order to conform your booking.");
    }
}
