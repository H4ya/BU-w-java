//Admin: name "Saleh Ahmed", phone "05432101234", password "Sx123123", username "Saleh22", email "salehr224@gmail.com"

import java.util.Random;
import java.util.Scanner;

public class BookingSystem {

    static String userName, userPhone, userPassword;
    public static final Admin admin = new Admin();
    public static int choice;
    public static Scanner input = new Scanner(System.in);

    static String main_menu = "-------------------------\n" +
            "Please choose which system to enter\n" +
            "1- [ Admin ] \n" +
            "2- [ Guest ]\n" +
            "3- [ Exit  ]\n" +
            "o- Your Choice: ";

    static String admin_menu = "-------------------------\n" +
            "1- [ Show statistics  ]\n" +
            "2- [ View bookings    ]\n" +
            "3- [ Delete a booking ]\n" +
            "4- [ Display guest information ]\n" +
            "5- [ Exit ]\n" +
            "o- Your Choice: ";

    static String guest_menu = "-------------------------\n" +
            "1- [ View booking ]\n" +
            "2- [ Exit ]\n" +

            "o- Your Choice: ";

    public static boolean terminate = false;

    public static void main(String[] args) {
        admin.guests = new Guest[Guest.MAX_GUEST_NUMBER];
        admin.bookings = new Booking[Booking.MAX_BOOKING_NUMBER];
        System.out.println("***  Welcome to our hotel system***");

        while (!terminate) { // a loop to keep the program running until the user choose to exit
            int choice = 0;
            System.out.print(main_menu);
            choice = input.nextInt();
            switch (choice) {
                case 1: // will be entered if the user choose admin
                    input.nextLine(); // this line is repeated throughout the program to consume the new line
                                      // character
                    System.out.println("o- Enter your username: ");
                    userName = input.nextLine().trim(); // trim is added (to .nextLine() only) to ignore any white space
                                                        // before or after the input
                    System.out.println("o- Enter Password: ");
                    userPassword = input.next();
                    ;
                    System.out.println("o- Enter Phone Number: ");
                    userPhone = input.next();
                    ;
                    Admin admin = new Admin();
                    if (admin.checkUser(admin, admin, userName, userPassword, userPhone)) {
                        admin_System();
                    } else {
                        System.out.println("Access Denied."); // print a message if the admin access is denied due to
                                                              // wrong information
                    }
                    break;
                case 2: // will be entered if the user choose guest

                    Guest guest = new Guest();
                    System.out.println("\n***  Welcome to Guest system ***\n");
                    if (Guest.rightInfo == false) {
                        System.out.println("");
                    }
                    System.out.print("o- Enter your age: ");
                    int age = input.nextInt();
                    if (age < 18) {
                        System.out.println("You must be 18 or older to book a room.");
                        continue;
                    } else {
                        guest.setAge(age);

                        guest_System(guest);
                        break;
                    }
                case 3: // will be entered if the user choose to exit the program
                    System.out.println("Thank you for using our hotel system.");
                    terminate = true;
                    break;

                default:
                    System.out.println("Invalid input. Please try again.");
            }
        }
    }

    static void admin_System() { // this method will be called if the user choose to enter the admin system
        System.out.println("\n*** Welcome to Admin system ***");
        boolean done = false; // a flag to check if the user is done with the system
        while (!done) {
            String bookingID = "";
            if (Booking.bookingCount <= 0) {
                System.out.println("Sorry, system has no saved bookings yet.");// stops the admin from entering the
                                                                               // admin menu if there are no bookings
                System.out.println("please try again after at least a booking is added.");
                done = true; // updating a flag to exit the loop
                break;
            } else {
                System.out.print(admin_menu); // print the admin menu if the user confirm his identity as an admin
                                              // successfully
                choice = input.nextInt();
                if (choice == '\n') {
                    input.nextLine();
                }
                switch (choice) {
                    case 1: // show statistics of the hotel
                        admin.showStatistics();
                        break;
                    case 2: // view bookings
                        admin.viewBookings();
                        break;
                    case 3: // delete booking
                        System.out.print("o- Enter the booking ID to delete: ");
                        admin.delBooking(input.next());
                        break;

                    case 4: // display guest information by searching there name
                        System.out.println("Display guest information");
                        if (Guest.guestCount > 0) {
                            System.out.print("o- Enter the guest name: ");
                            input.nextLine();
                            userName = input.nextLine();
                            boolean found = false;
                            for (int i = 0; i < Guest.guestCount; i++) {
                                if (admin.guests[i].name.equalsIgnoreCase(userName)) {
                                    admin.displayGuestInfo(admin.guests[i]); // a method to print the guest name, age,
                                                                             // phone
                                                                             // number and family status
                                    found = true; // a flag to display a message if the guest is not found
                                    break;
                                }
                            }

                            if (!found) {
                                System.out.println("Guest not found.");
                            }
                        } else {
                            System.out.println("System has no saved guests currently.");
                        }
                        break;
                    case 5: // entered if the admin choose to exit
                        System.out.println("Exiting Admin system...");
                        done = true; // updating a flag to exit the loop
                        break;
                    default:
                        System.out.println("Invalid input. Please enter a valid option.");
                }
            }
        }
    }

    static void guest_System(Guest guest) { // this method will be called if the user choose to enter the guest system
        choice = 0;
        // a loop to make sure that the user enter the correct information, it will run
        // as least once
        System.out.print("o- Enter your name: ");
        input.nextLine();
        guest.name = input.nextLine().trim();
        do {
            Guest.rightInfo = true; // a flag to check if all information are correct
            System.out.print("o- Enter your phone number: ");
            String phoneNo = input.next();
            guest.setPhoneNo(phoneNo);
        } while (!Guest.rightInfo);
        do {
            Guest.rightInfo = true;
            System.out.print("o- Enter your password: ");
            guest.setPassword(input.next());
        } while (!Guest.rightInfo);

        // add the guest to the array of guests if everything is correct
        admin.guests[Guest.guestCount] = guest;
        // fill the guest information
        if (Guest.rightInfo) { // check if the information is correct to add the guest
            for (int i = 0; i < guest.name.length(); i++) { // this will capitalized the first letter every word in the
                                                            // name
                if (i == 0 || guest.name.charAt(i - 1) == ' ') {
                    guest.name = guest.name.substring(0, i) + guest.name.substring(i, i + 1).toUpperCase()
                            + guest.name.substring(i + 1);
                }
            }
            System.out.printf("Hello \" %s \", your account is added successfully.\n", guest.name);
            System.out.println("Proceed to add booking...");
            guest.addBooking(admin); // add a booking for the guest
            Guest.guestCount++;// Increase the guest count by 1 to add the next guest to the next index
        } else {
            System.out.println("Please enter your information correctly.");
        }

        while (true) {
            input.nextLine();
            System.out.print(guest_menu); // print the guest menu if the guest is added successfully
            choice = input.nextInt();
            if (choice == 2) { // check if the user choose to exit the guest system
                // exit the Guest System
                System.out.println("Exiting Guest system...");
                break;
            }

            // check the guest across the guests array using checkUser method
            else if (choice == 1) { // view the booking choice
                System.out.println("Please verify your information to access the system.");
                System.out.println("o- Enter your name:");
                userName = input.nextLine();
                System.out.println("o- Enter your phone number:");
                userPhone = input.next();
                System.out.println("o- Enter your password:");
                userPassword = input.next();
                if (!guest.checkUser(admin, guest, userName, userPassword, userPhone)) {
                    System.out.println("Unauthorized access."); // print a message if the user
                                                                // is not found and terminate
                                                                // the loop
                    continue;
                }
                System.out.println("accessed succefully");
                // view the guest booking
                if (Guest.guestCount > 0 && Booking.bookingCount > 0) {
                    System.out.print("o- Enter booking ID: ");
                    String bookingID = input.next();
                    guest.viewBooking(admin, bookingID);
                } else {
                    System.out.println("\tNo guest found.");
                }
                break;
            } else {
                System.out.println("Invalid input.");
            }
        }
    }
}

class User {
    public static boolean rightInfo = true;
    public String name;
    private String phoneNumber;
    private String password;

    // default Constructor
    User() {
    }

    // parametrized Constructor
    User(String name, String phoneNumber, String password) {
        this.name = name;
        setPhoneNo(phoneNumber);
        setPassword(password);
    }

    // Method to check if the user is allowed to enter
    public boolean checkUser(Admin admin, User user, String userName, String userPassword, String userPhone) {
        if (user instanceof Admin) { // check if the user is an admin to confirm his specified identity
            if (userName.equalsIgnoreCase(admin.getUserName()) && userPassword.equals(admin.getPassword())) {
                return true;
            } else {
                return false;
            }
        } else { // if the user is a guest to search him across the guests array then check the
                 // name, password, and phone number
            for (int i = 0; i < Guest.guestCount; i++) {
                if (userName.equalsIgnoreCase(admin.guests[i].name)
                        && userPassword.equals(admin.guests[i].getPassword())
                        && userPhone.equals(admin.guests[i].getPhoneNo())) {
                    return true;
                }
            }
            return false; // return false if the guest is not found across the array
        }
    }

    // Getter for password
    public String getPassword() {
        return password;
    }

    // Setter for password
    public void setPassword(String password) {
        if (password.matches("[a-zA-Z0-9]{8,12}")) {
            this.password = password;
        } else {
            rightInfo = false;
            System.out.println(
                    "Password is invalid: it must be :\n8 to 12 characters only.\nContain only Capital and Small English characters.\nnumbers.");
        }
    }

    // Getter for phone number
    public String getPhoneNo() {
        return phoneNumber;
    }

    // Setter for phone number with validation for 10 digits
    public void setPhoneNo(String phoneNumber) {
        if (phoneNumber.matches("05[0-9]{8}")) {
            // make sure that the number start with 05 and contain exactly 10 digits
            this.phoneNumber = phoneNumber;
        } else {
            System.out.println("Invalid phone number: phone must contain exactly 10 digits starting with 05");
            rightInfo = false;
        }
    }
}

class Guest extends User {

    private int age;
    public boolean familyStatus;
    public static final int MAX_GUEST_NUMBER = 100;
    public static int guestCount = 0;

    // default constructor
    Guest() {
    }

    Guest(String name, String phoneNo, String password, int age, boolean familyStatus) {
        super(name, phoneNo, password);
        this.age = age;
        this.familyStatus = familyStatus;
    }

    // getter and setter for age
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void addBooking(Admin admin) {
        Scanner input = new Scanner(System.in);
        int roomChoice = 0;
        while (true) {
            System.out.println("Choose room type:\n1- [ Family Apartment ]\n2- [ Single Apartment ]");
            roomChoice = input.nextInt();
            if (roomChoice == 1 || roomChoice == 2) {
                break;
            }
            System.out.println("Invalid input, try again.");
        }
        System.out.print("Enter number of days: ");
        int days = input.nextInt();
        double price;
        Booking newBooking;

        if (roomChoice == 1) {
            FamilyApartment familyApartment = new FamilyApartment();
            familyStatus = true;
            System.out.print("Enter number of people: ");
            familyApartment.setPeopleNo(input.nextInt());
            price = familyApartment.calculatePrice(familyApartment.getPeopleNo(), days);
            newBooking = familyApartment;
            newBooking.assignRoomNo(familyApartment.getPeopleNo(), false);
            FamilyApartment.countFamilyBookings++;
        } else if (roomChoice == 2) {
            familyStatus = false;
            SingleApartment singleApartment = new SingleApartment();
            System.out.print("Include buffet? (true/false): ");
            boolean buffetIncluded = input.nextBoolean();
            singleApartment.setBuffetIncluded(buffetIncluded);
            System.out.print("Include view? (true/false): ");
            boolean viewIncluded = input.nextBoolean();
            singleApartment.setRoomWithView(viewIncluded);
            price = singleApartment.calculatePrice(buffetIncluded, viewIncluded, days);
            newBooking = singleApartment;
            newBooking.assignRoomNo(1, viewIncluded);
            SingleApartment.countSingleBookings++;
        } else {
            System.out.println("Invalid input. Please try again.");
            return;
        }

        newBooking.setBookingID(this.getPhoneNo());
        newBooking.setAmountOfDays(days);
        newBooking.setGuest(this); // Set the guest for the booking
        System.out.print("Enter the visit month: ");
        int month = input.nextInt();
        System.out.print("Enter the visit day: ");
        int day = input.nextInt();
        if (month > 0 && month < 13 && day > 0 && day < 31) {
            newBooking.month = month;
            newBooking.day = day;
        } else {
            System.out.println("Invalid date. Please try again.");
            return;
        }

        System.out.printf("Booking added successfully with price: %.2f\nBooking ID: %s\n", price,
                newBooking.getBookingID());
        newBooking.setPayment(price, roomChoice == 2 && ((SingleApartment) newBooking).getBuffetIncluded(),
                roomChoice == 2 && ((SingleApartment) newBooking).getRoomWithView());
        admin.bookings[Booking.bookingCount] = newBooking;
        Booking.bookingCount++;
    }

    public void viewBooking(Admin admin, String bookingID) {
        if (Booking.bookingCount > 0) {
            for (int i = 0; i < Guest.guestCount; i++) {
                if (admin.bookings[i] != null && admin.bookings[i].getBookingID().equals(bookingID)
                        || bookingID.equals("9999")) {
                    Booking booking = admin.bookings[i]; // rename the found booking to make it more readable
                    System.out.println("Booking Details:");
                    System.out.println("  Booking ID: " + booking.getBookingID());
                    System.out.println("  Room Number: " + booking.getRoomNo());
                    System.out.println("  Guest Name: " + booking.getGuest().name);
                    System.out.println("  Amount of Days: " + booking.getAmountOfDays());
                    System.out.println("  Booking Date: 2024/" + booking.month + "/" + booking.day);
                    if (admin.bookings[i] instanceof SingleApartment) {
                        ((SingleApartment) admin.bookings[i]).showIncludedOptions(bookingID,
                                ((SingleApartment) admin.bookings[i]).getBuffetIncluded(),
                                ((SingleApartment) admin.bookings[i]).getRoomWithView());
                    }
                    System.out.println("  Amount: " + booking.getPayment().getAmount());
                    return;
                }
                System.out.println("The booking with ID (" + bookingID + ") does not exist.");

            }
        }
    }
}

class Admin extends User {
    private String userName = "Saleh22";
    private String email = "salehr224@gmail.com";
    public Booking[] bookings = new Booking[Booking.MAX_BOOKING_NUMBER];
    public Guest[] guests = new Guest[Guest.MAX_GUEST_NUMBER];

    Admin() {
        super("Saleh Ahmed", "0543210123", "Sx123123");
    }

    public String getUserName() {
        return userName;
    }

    public String getEmail() {
        return email;
    }

    public void showStatistics() { // this method will show the statistics of the hotel by taking the counts of the
                                   // bookings and the type of bookings and calculate the rate of each type.
        double familyBookingRate;
        double singleBookingRate;
        if (Booking.bookingCount > 0) {
            System.out.println("__________\n");
            System.out.println("Total Bookings: " + Booking.bookingCount);
            System.out.println("Total Number of Single type Bookings: " + SingleApartment.countSingleBookings);
            System.out.println("Total Number of Family type Bookings: " + FamilyApartment.countFamilyBookings);
            familyBookingRate = ((double) FamilyApartment.countFamilyBookings / Booking.bookingCount) * 100;
            singleBookingRate = ((double) SingleApartment.countSingleBookings / Booking.bookingCount) * 100;
            double rate = (FamilyApartment.countFamilyBookings > SingleApartment.countSingleBookings) ? familyBookingRate : singleBookingRate;
            if (FamilyApartment.countFamilyBookings > SingleApartment.countSingleBookings) {
                System.out.print("\"Family bookings\"");
            } else if (SingleApartment.countSingleBookings > FamilyApartment.countFamilyBookings) {
                System.out.print("\"Single bookings\"");
            } else {
                System.out.print("Both");
            }
            System.out.printf(" are the common type of bookings with %.2f% rate\n", rate);
        } else {
            System.out.println("System has no saved bookings currently.");
        }
    }

    public void viewBookings() { // this method will show all the bookings in the hotel
        if (Booking.bookingCount <= 0) {
            System.out.println("System has no saved bookings currently.");// print a message if there are no bookings
                                                                          // there are no bookings
            return;
        }
        System.out.println("List of all " + Booking.bookingCount + " bookings:");
        for (int i = 0; i < Booking.bookingCount; i++) {
            Booking booking = bookings[i];
            System.out.println("#" + (i + 1) + " Booking Details:");
            System.out.println(" Booking ID: " + booking.getBookingID());
            System.out.println(" Room Number: " + booking.getRoomNo());
            System.out.println(" Guest Name: " + booking.getGuest().name);
            System.out.println(" Amount of Days: " + booking.getAmountOfDays());
            System.out.println(" Booking Date: 2024/" + booking.month + "/" + booking.day);
            System.out.println("----------------");
        }
    }

    public void delBooking(String bookingID) {
        if (Booking.bookingCount <= 0) {
            System.out.println("System has no saved bookings currently.");// print a message if there are no bookings
                                                                          // there are no bookings
            return;
        }
        for (int i = 0; i < Booking.bookingCount; i++) {
            if (bookings[i].getBookingID().equals(bookingID)) {
                if (bookings[i] instanceof FamilyApartment)
                    FamilyApartment.countFamilyBookings--;
                else
                    SingleApartment.countSingleBookings--;
                bookings[i] = bookings[--Booking.bookingCount];// assign the last booking to the deleted one
                                                               // then
                                                               // decrease the booking number
                bookings[Booking.bookingCount] = null;
                System.out.println("Booking with ID (" + bookingID + ") has been deleted.");
                return;
            }
        }
        System.out.println("Booking with ID (" + bookingID + ") not found.");// print a message if the a booking with
                                                                             // that ID is not found
    }

    public void displayGuestInfo(Guest guest) { // a method to print all information of the guest

        System.out.println("Guest Information:");
        System.out.println("Name: " + guest.name);
        System.out.println("Age: " + guest.getAge());
        System.out.println("Booking Status: " + (guest.familyStatus ? "Family booking" : "Single booking"));
        System.out.println("Phone Number: " + guest.getPhoneNo());
    }
}

class Booking {

    private int amountOfDays;
    private int roomNo;
    public int month;
    public int day;
    private String bookingID;
    private Guest guest;
    public static final int MAX_BOOKING_NUMBER = 100;
    public static int bookingCount = 0;
    private Payment payment;
    private double price;

    Booking() {
    }

    void assignRoomNo(int peopleNo, boolean viewIncluded) { // randomly assign rooms from 1 to 150 for families and from
                                                            // 151 to 300 (rooms with view) for singles
        this.roomNo = ((peopleNo == 1 && viewIncluded) ? new Random().nextInt(150) + 151
                : (new Random().nextInt(150) + 1));
        System.out.println("Assigned Room Number: " + this.roomNo);
    }

    public int getRoomNo() {
        return roomNo;
    }

    // getter and setter for the amount of days
    public int getAmountOfDays() {
        return amountOfDays;
    }

    public void setAmountOfDays(int days) {
        this.amountOfDays = days;
    }

    // getter and setter for the booking ID
    public String getBookingID() {
        return bookingID;
    }

    // set the ID using middle 3 digits from the guest phone number and 4 random
    // digits
    public void setBookingID(String phoneNo) {
        String randomDigits = "" + (new Random().nextInt(10000));
        this.bookingID = phoneNo.substring(3, 7) + randomDigits;
    }

    public Guest getGuest() {
        return guest;
    }

    public void setGuest(Guest guest) {
        this.guest = guest;
    }

    // getter and setter for the payment
    public Payment getPayment() {
        return payment;
    }

    public void setPayment(double price, boolean buffet, boolean viewIncluded) {
        Scanner input = new Scanner(System.in);
        int paymentChoice = 0;
        while (true) {
            System.out.println("Choose payment method:\n  1- [ Credit Card ]\n  2- [ Cash ]");
            paymentChoice = input.nextInt();
            if (paymentChoice == 1 || paymentChoice == 2) {
                break;
            } else {
                System.out.println("Invalid input, try again");
            }
        }

        if (paymentChoice == 1) {
            CreditCard payment = new CreditCard();
            do {
                Guest.rightInfo = true;
                System.out.print("Enter card number: ");
                payment.setCardNo(input.next());
                System.out.print("Enter card CVC: ");
                payment.setCardCVC(input.next());
            } while (Guest.rightInfo == false);
            payment.setAmount(price); // Set the amount for the payment
            payment.message();
            this.payment = payment;
        } else if (paymentChoice == 2) {
            Cash payment = new Cash(price);
            payment.setDueDate(day, month);
            payment.message();
            this.payment = payment;
        }
        this.price = price; // Store the price in the booking
    }

}

class FamilyApartment extends Booking {
    private int peopleNo;
    public static int countFamilyBookings = 0;

    // Default constructor
    FamilyApartment() {
    }

    // Parameterized constructor
    FamilyApartment(int days, Guest guest, int peopleNo) {
        setPeopleNo(peopleNo);
        assignRoomNo(peopleNo, false);
        setBookingID(guest.getPhoneNo());
        setAmountOfDays(days);
        this.peopleNo = peopleNo;
    }

    public boolean getBuffetIncluded() {
        return true;
    }

    // Getter and setter for number of people
    public int getPeopleNo() {
        return peopleNo;
    }

    public void setPeopleNo(int peopleNo) {
        while (true) {
            if (peopleNo <= 11 && peopleNo > 0) {
                this.peopleNo = peopleNo;
                break;
            } else {
                System.out.println("Invalid number of people for one booking, max is 11 min is 1");
                continue;
            }
        }
    }

    // Method to calculate price for family bookings
    public double calculatePrice(int peopleNo, int days) {
        double result = (250 * peopleNo) * days; // default value for person per day =200 + 50 for
                                                 // buffet multiply it with the amount of days
        return result - result * (15.0 / 100.0);// this code gives %15 discount for families
        // this price include the buffet only, room with view is not included for
        // children safety reasons
    }

    // Method to return the number of beds
    public int bedsNo() {
        int queenBeds, singleBeds;
        Scanner input = new Scanner(System.in);
        while (true) {
            System.out.println("o- How many Queen size beds are needed? (Maximum is 3): ");

            queenBeds = input.nextInt();
            System.out.println("o- How many single size beds are needed? (Maximum is 5): ");
            singleBeds = input.nextInt();

            if (queenBeds <= 3 && singleBeds <= 5) {
                break;
            } else {
                System.out.println("Invalid numbers, please try again");
                continue;
            }
        }
        return queenBeds + singleBeds;
    }
}

class SingleApartment extends Booking {

    // Default constructor
    SingleApartment() {
    }

    // Parameterized constructor
    SingleApartment(int days, boolean buffetIncluded, boolean roomWithView) {
        this.buffetIncluded = buffetIncluded;
        this.roomWithView = roomWithView;
    }

    private boolean buffetIncluded; // adds 50 Riyal per day for the price
    private boolean roomWithView; // adds 50 Riyal for the total price
    public static int countSingleBookings = 0;

    // Getter and Setter for buffetIncluded
    public boolean getBuffetIncluded() {
        return buffetIncluded;
    }

    public void setBuffetIncluded(boolean buffetIncluded) {
        this.buffetIncluded = buffetIncluded;
    }

    // Getter and Setter for roomWithView
    public boolean getRoomWithView() {
        return roomWithView;
    }

    public void setRoomWithView(boolean roomWithView) {
        this.roomWithView = roomWithView;
    }

    // Method to calculate price for single bookings
    public double calculatePrice(boolean buffet, boolean viewIncluded, int days) {
        double result = 200 * days;// default value for person per day
        result += (buffet ? 50 * days : 0) + (viewIncluded ? 50 : 0);
        return result;
        // this price include the buffet only
    }

    // Method to show included options
    public void showIncludedOptions(String bookingID, boolean buffet, boolean viewIncluded) {
        System.out.println(getRoomWithView() + "\nBuffet Included adds: "
                + (getBuffetIncluded() ? getAmountOfDays() * 50 : 0) + " SAR");
        System.out.println("View Included adds: " + (getRoomWithView() ? 50 : 0) + " SAR");
    }
}

class Payment {
    private double amount;
    private String dateOfPayment;

    // Default constructor
    Payment() {
    }

    // Constructor with parameters
    Payment(double amount, String dateOfPayment) {
        this.amount = amount;
        this.dateOfPayment = dateOfPayment;
    }

    // Getter for amount
    public double getAmount() {
        return amount;
    }

    // setter for amount
    public void setAmount(double amount) {
        this.amount = amount;
    }

    // Getter for the date Of Payment
    public String getDate() {
        return dateOfPayment;
    }

    // Setter for dateOfPayment
    public void setDate(int month, int day) {
        this.dateOfPayment = month + "/" + day;
    }
}

class CreditCard extends Payment {
    private String cardNo;
    private String cardCVC;

    // Default constructor
    CreditCard() {
    }

    // Getter and setter for cardNo
    public String getCardNo() {
        return cardNo;
    }

    public void setCardNo(String cardNo) {
        if (cardNo.matches("[0-9]{16}")) {// check if the card number contains exactly 16 digits
            this.cardNo = cardNo;
        } else {
            Guest.rightInfo = false;
            System.out.println("Invalid card number, must contain exactly 16 digits.");
        }
    }

    // Getter and setter for card CVC
    public String getCardCVC() {
        return cardCVC;
    }

    public void setCardCVC(String cardCVC) {
        if (cardCVC.matches("[0-9]{3}")) {// check if the card password contains exactly 3 digits
            this.cardCVC = cardCVC;
        } else {
            Guest.rightInfo = false;
            System.out.println("Invalid card password, must contain exactly 3 digits.");

        }
    }

    // Method to display a message
    public void message() {
        System.out.println("Payment processed using Credit Card ending in " + cardNo.substring(cardNo.length() - 4)
                + "\n" + "Amount: " + this.getAmount());
    }
}

class Cash extends Payment {
    private String paymentDueDate;

    // Default constructor
    Cash() {
    }

    Cash(double price) {
        setAmount(price);
    }

    // Setter for paymentDueDate
    public void setDueDate(int day, int month) {
        if (day < 27) {
            this.paymentDueDate = month + "/" + (day + 2) + " at 8:00pm";
            return;
        }
        this.paymentDueDate = ((month == 12) ? "1" : (month + 1)) + "/2" + " at 8:00pm";
    }

    // Getter for paymentDueDate
    public String getDueDate() {
        return paymentDueDate;
    }

    // Method to display a message related to the cash payment
    public void message() {
        System.out.println("Cash payment is due on | " + getDueDate()
                + " | with amount =" + this.getAmount() + "SAR"
                + "\n Please make sure to pay on time in order to conform your booking.");
    }
}
