//! return here later
// OPTIMIZE 
// TODO
// UGLY
// fixME
//? Hey
// *@param
//meeh

import java.util.Random;
import java.util.Scanner;

public class BookingSystem {
    public static int choice;

    static String main_menu = "\n*** Welcome to Booking System ***\n" +
            "1- [ Admin ] \n" +
            "2- [ Guest ]\n" +
            "3- [ Exit  ]\n" +
            "Your Choice: ";

    static String admin_menu = "\n\t*** Welcome to Admin system ***\n" +
            "\t1- [ Show statistics  ]\n" +
            "\t2- [ View bookings    ]\n" +
            "\t3- [ Delete a booking ]\n" +
            "\t4- [ Edit a booking   ]\n" +
            "\t5- [ Display guest information ]\n" +
            "\t6- [ Exit ]\n" +
            "\tYour Choice: ";

    static String guest_menu = "\n\t*** Welcome to Guest system ***\n" +
            "\t1- [ Add booking  ]\n" +
            "\t2- [ View booking ]\n" +
            "\t2- [ Exit ]\n" +
            "\tYour Choice: ";
    static Admin adminObj = new Admin("admin", "Manea2024@gmail.com", "Manea", "0551231234", "admin123");
    public static Scanner input = new Scanner(System.in);
    static Admin admin = new Admin();
    static Guest guest;

    public static void main(String[] args) {
        while (true) {
            System.out.print(main_menu);
            choice = input.nextInt();

            switch (choice) {
                case 1:
                    if (admin.checkUser()) {
                        System.out.println("");
                        admin_System();
                    } else {
                        System.out.println("Access Denied.");
                    }
                    break;
                case 2:
                    guest_System();
                    break;
                case 3:
                    System.out.println("Thank you for using our system <3");
                    break;

                default:
                    System.out.println("Wrong Entry. Please enter a valid option.");
            }
        }
    }

    static void admin_System() {
        while (true) {
            System.out.print(admin_menu);
            choice = input.nextInt();

            switch (choice) {
                case 1:
                    admin.showStatistics();
                    break;
                case 2:
                    admin.viewBookings();
                    break;
                case 3:
                    System.out.print("Enter the booking ID to delete: ");
                    String bookingID = input.next();
                    admin.delBooking(bookingID);
                    break;
                case 4:
                    System.out.print("Enter the booking ID to edit it: ");
                    String bookingID2 = input.next();
                    admin.editBooking(bookingID2);
                    break;
                case 5:
                    System.out.println("Display guest information");
                    break;
                case 6:
                    System.out.println("Exiting Admin system...");
                    break;
                default:
                    System.out.println("Wrong Entry. Please enter a valid option.");
            }
        }
    }

    static void guest_System() {
        int choice = 0;

        while (choice != 2) {
            System.out.print(guest_menu);
            choice = input.nextInt();

            switch (choice) {
                case 1:
                    input.nextLine();
                    System.out.print("\tEnter guest name: ");
                    String name = input.nextLine();
                    System.out.print("\tEnter guest phone number: ");
                    String phoneNumber = input.nextLine();
                    System.out.print("\tEnter guest password: ");
                    String password = input.nextLine();
                    System.out.print("\tEnter guest age: ");
                    int age = input.nextInt();
                    System.out.print("\tDo you have family ? yes or no: ");
                    boolean familyStatus = input.nextBoolean();
                    guest = new Guest(name, phoneNumber, password, age, familyStatus);
                    admin.addGuest(guest);
                    System.out.println("Guest added successfully.");
                    break;
                case 2:
                    if (guest != null) {
                        System.out.print("\tEnter booking ID: ");
                        String bookingID = input.next();
                        guest.viewBooking(bookingID);
                    } else {
                        System.out.println("\tNo guest found. Please add a booking first.");
                    }
                    break;
                case 3:
                    System.out.println("Exiting Guest system...");
                    break;
                default:
                    System.out.println("Wrong Entry. Please enter a valid option.");
            }
        }
    }
}

class User {
    public String name;
    private String phoneNumber;
    private String password;

    // default Constructor
    public User() {
    }

    // parametrized Constructor
    public User(String name, String phoneNumber, String password) {
        this.name = name; // optimize ? maybe? ig
        setPhoneNo(phoneNumber);
        setPassword(password);
    }

    // ! I added Scanner as parameter is it ok?
    // Method to check if the user is allowed to enter
    public boolean checkUser(Scanner myInput, String name, String password, String phone) {
        System.out.println("Enter Username: ");
        String username = myInput.nextLine();
        System.out.println("Enter Password: ");
        String userPassword = myInput.nextLine();
        System.out.println("Enter Phone Number: ");
        String userPhone = myInput.nextLine();// ugly!!!
        if (!username.equals(name)) {
            System.out.println("Error: Incorrect name.");
            return false;
        } else if (!userPassword.equals(password)) {
            System.out.println("Error: Incorrect password.");
            return false;
        } else if (!userPhone.equals(phone)) {
            System.out.println("Error: Incorrect password.");
            return false;

        } else {
            System.out.println("Login successful.");
            return true;
        }
    }

    // Getter for password
    public String getPassword() {
        return password;
    }

    // Setter for password
    public void setPassword(String password) {
        if (password.length() >= 7) {
            if (password.matches("[a-zA-Z0-9]*")) {
                if (password.matches(".*[_|.].*")) {
                    System.out.println("Valid password");
                    this.password = password;
                } else {
                    System.out.println(
                            "Password is invalid: it must contain at least one special character '.' or '_' but not the begging nor the end");
                }
            } else {
                System.out.println("Password is invalid: it must contain English characters and numbers only ");
            }
        } else {
            System.out.println("Password is invalid: it must contain at least 7 characters.");
        }
    }

    // Getter for phone number
    public String getPhoneNo() {
        return phoneNumber;
    }

    // Setter for phone number with validation for 10 digits
    public void setPhoneNo(String phoneNumber) {
        if (phoneNumber.matches("05[0-9]{8}")) {
            // make sure that the number start with 05 and contain exactly 10 digits
            this.phoneNumber = phoneNumber;
        } else {
            System.out.println("Invalid phone number: phone must contain exactly 10 digits starting with 05");
        }
    }
}

class Guest extends User {
    private int age;
    public boolean familyStatus;
    public static final int MAX_GUEST_NUMBER = 100;
    public static int guestCount = 0;

    // default constructor
    public Guest() {
    }

    public Guest(String name, String phoneNo, String password, int age, boolean familyStatus) {
        super(name, phoneNo, password);
        this.age = age;
        this.familyStatus = familyStatus;
    }

    // getter and setter for age
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    // optimize it! down
    public void addBooking(Scanner myInput) {

        System.out.println("Choose room type:\n1- Family Apartment\n2- Single Apartment");
        int roomChoice = myInput.nextInt();
        double price;

        if (roomChoice == 1) {
            System.out.print("Enter number of people: ");
            int peopleNo = myInput.nextInt();
            FamilyApartment familyApartment = new FamilyApartment(peopleNo);
            price = familyApartment.calculatePrice(peopleNo);
            System.out.println("Price for Family Apartment: " + price);
        } else {
            System.out.print("Include buffet? (true/false): ");
            boolean buffetIncluded = input.nextBoolean();
            System.out.print("Include view? (true/false): ");
            boolean roomWithView = input.nextBoolean();
            SingleApartment singleApartment = new SingleApartment(buffetIncluded, roomWithView);
            price = singleApartment.calculatePrice(buffetIncluded, roomWithView);
            System.out.println("Price for Single Apartment: " + price);
        }

        Booking booking = new Booking(guest, price);
        admin.addBooking(booking);
        System.out.println("Booking added successfully with price: " + price);
    }

    public void viewBooking(String bookingID) { // toDo
    }
}

class Admin extends User {
    private String userName;
    private String email;
    public Booking[] bookings;
    public Guest[] guests;

    public Admin() {
        bookings = new Booking[Booking.MAX_BOOKING_NUMBER];
        guests = new Guest[Guest.MAX_GUEST_NUMBER];
    }

    public Admin(String userName, String email, String name, String phoneNumber, String password) {
        super(name, phoneNumber, password);
        this.userName = userName;
        setEmail(email);
        bookings = new Booking[Booking.MAX_BOOKING_NUMBER];
        guests = new Guest[Guest.MAX_GUEST_NUMBER];
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        if (email.matches("[\\w]{4,}@gmail.com")) {// check if the gmail have at least 4 characters before "@gmail.com"
            this.email = email;
        } else {
            System.out.println("Invalid email: must contain at least 4 characters before \"@gmail.com\".");
        }
    }

    public void showStatistics() {
        System.out.println("Total Bookings: " + Booking.bookingCount);
        System.out.println("Total Number of Single type Bookings: " + FamilyApartment.countFamilyBookings);
        System.out.println("Total Number of Family type Bookings " + SingleApartment.countSingleBookings);
        System.out
                .println("The common type of booking in our hotel is "
                        + ((FamilyApartment.countFamilyBookings > SingleApartment.countSingleBookings)
                                ? "Family bookings with %"
                                        + (double) FamilyApartment.countFamilyBookings / Booking.bookingCount
                                : "Single bookings with %"
                                        + (double) SingleApartment.countSingleBookings / Booking.bookingCount)
                        + " rate");
    }// optimize?^^ maybe

    public void viewBookings() {
        System.out.println("List of all bookings:");
        for (int i = 0; i < Booking.bookingCount; i++) {
            bookings[i].printBookingDetails();
        }
    }
    // toDo: add edit booking!! editBooking(bookingID:void)

    public void editBooking(String bookingID, Booking newBookingDetails) {
        if (Booking.bookingCount > 0) {
            for (int i = 0; i < Booking.bookingCount; i++) {
                if (bookings[i].getBookingID().equals(bookingID)) {
                    bookings[i] = newBookingDetails;
                    System.out.println("Booking with ID " + bookingID + " has been updated.");
                    return;
                }
            }
        }
        System.out.println("Booking with ID " + bookingID + " not found.");
    } // optimize ^^^

    public void delBooking(String bookingID) {
        if (Booking.bookingCount > 0) {
            for (int i = 0; i < Booking.bookingCount; i++) {
                if (bookings[i].getBookingID().equals(bookingID)) {
                    bookings[i] = bookings[--Booking.bookingCount];// assign the last booking to the deleted one then
                                                                   // decrease the booking number
                    bookings[Booking.bookingCount] = null;
                    System.out.println("Booking with ID (" + bookingID + ") has been deleted.");
                    return;
                }
            }
        }
        System.out.println("Booking with ID (" + bookingID + ") not found.");
    }

    public void displayGuestInfo(Guest guest) {
        System.out.println("Guest Information:");
        System.out.println("Name: " + guest.name);
        System.out.println("Age: " + guest.getAge());
        System.out.println("Family Status: " + (guest.FamilyStatus() ? "Yes" : "No"));// ugly !!!
        System.out.println("Phone Number: " + guest.getPhoneNo());
    }
}

class Booking {
    private int amountOfDays;
    private int roomNo;
    private String bookingID;
    private Guest guest;
    public int month;
    public int day;
    public static final int MAX_BOOKING_NUMBER = 100;
    public static int bookingCount = 0;

    public Booking() {
    }
    // toDo umm??? what is this
    /*
     * public Booking(int amountOfDays, int roomNo, int peopleNo, String phoneNo,
     * Guest guest, int month, int day) {
     * this.roomNo = roomNo;
     * setAmountOfDays(amountOfDays);
     * getGuest(guest);
     * this.month = month;
     * this.day = day;
     * setPhoneNo(phoneNo);
     * setBookingID(phoneNo);
     * }
     */

    public void assignRoomNo(int peopleNo) {
        this.roomNo = (peopleNo == 1) ? new Random().nextInt(151) : new Random().nextInt(151) + 150;
        System.out.println("Assigned Room Number: " + this.roomNo);
    }

    public int getRoomNo() {
        return roomNo;
    }

    // getter and setter for the amount of days
    public int getAmountOfDays() {
        return amountOfDays;
    }

    public void setAmountOfDays(int days) {
        this.amountOfDays = days;
    }

    // getter and setter for the booking ID
    public String getBookingID() {
        return bookingID;
    }

    // set the ID using middle 3 digits from the guest phone number and 4 random
    // digits
    public void setBookingID(String phoneNo) {
        String randomDigits = "" + (new Random().nextInt(9001) + 999);
        this.bookingID = phoneNo.substring(3, 7) + randomDigits;
    }

    public Guest getGuest() {
        return guest;
    }

    public void setGuest(Guest guest) {
        this.guest = guest;
    }
    // ? how ^^

    public void printBookingDetails() {
        System.out.println("Booking Details:");
        System.out.println("Booking ID: " + bookingID);
        System.out.println("Room Number: " + roomNo);
        System.out.println("Guest Name: " + this.guest.name); // optimize is it right??
        System.out.println("Amount of Days: " + amountOfDays);
        System.out.println("Booking Date: 2024/" + month + "/" + day);
    }
}

class FamilyApartment extends Booking {
    private int peopleNo;
    public static int countFamilyBookings = 0;

    // Default constructor
    public FamilyApartment() {
    }

    // Parameterized constructor
    public FamilyApartment(int days, Guest guest, int peopleNo) {// fixMe hooowwww to get variables from Booking

        assignRoomNo(peopleNo);
        this.month = month;
        this.day = day;
        setBookingID(phoneNo);
        setAmountOfDays(days);
        setGuest(guest);
        this.peopleNo = peopleNo;
        countFamilyBookings++;
        // ugly---
    }

    // Getter and setter for number of people
    public int getPeopleNo() {
        return peopleNo;
    }

    public void setPeopleNo(int peopleNo) {
        while (true) {
            if (peopleNo <= 11) {
                this.peopleNo = peopleNo;
                break;
            } else {
                System.out.println("Too many people for one booking, max is 11");
                continue;
            }
        }
    }

    // Method to calculate price for family bookings
    public double calculatePrice(int peopleNo) {
        double result = (250 * peopleNo) * this.getAmountOfDays(); // default value for person per day =200 +50 for
                                                                   // buffet. multiply it with the amount of days
        return result;
        // this price include the buffet only

    }

    // Method to return the number of beds
    public int bedsNo() {
        int queenBeds, singleBeds;
        while (true) {
            System.out.println("How many Queen size bed are needed? (Maximum is 3): ");
            Scanner sc = new Scanner(System.in);
            queenBeds = sc.nextInt();
            System.out.println("How many single size bed are needed? (Maximum is 5): ");
            singleBeds = sc.nextInt();

            if (queenBeds <= 3 && singleBeds <= 5) {
                break;
            } else
                System.out.println("Invalid numbers, please try again");
            {
                continue;
            }
        }
        return queenBeds + singleBeds;
    }
}

class SingleApartment extends Booking {
    private boolean buffetIncluded; // adds 50 Riyal per day for the price
    private boolean roomWithView; // adds 50 Riyal for the price
    public static int countSingleBookings = 0;

    // Default constructor
    public SingleApartment() {
        countSingleBookings++;
    }

    // Parameterized constructor
    public SingleApartment(int days, Guest guest, boolean buffetIncluded, boolean roomWithView) {
        this.buffetIncluded = buffetIncluded;
        this.roomWithView = roomWithView;
        countSingleBookings++;
    }

    // Method to calculate price for single bookings
    public double calculatePrice(boolean buffet, boolean viewIncluded) {
        double result = 200;// default value for person per day
        if (viewIncluded) {
            result += 50;
        }
        if (buffetIncluded) {
            result += (50 * super.getAmountOfDays()); // toDo check if super. is ri
        }
        return result;
        // this price include the buffet only
    }

    // Method to show included options
    public double showIncludedOptions(String bookingID, boolean buffet, boolean viewIncluded) {
        double result = 0;
        if (viewIncluded) {
            result += 50;
            System.out.println("The view option added 50 SAR ");

        }
        if (buffet) {
            result += 50 * super.getAmountOfDays();

            System.out.printf("The buffet option is included which added %0.2f SAR\n", (50 * super.getAmountOfDays()));
        }
        System.out.println("_____________________________");
        System.out.println("Total options adds " + result + "SAR");
        return result;
    }
}

class Payment {
    private double amount;
    private String dateOfPayment;

    // Default constructor
    public Payment() {
    }

    // Constructor with parameters
    public Payment(double amount, String dateOfPayment) {
        this.amount = amount;// ugly do we put setters/getters or no need?
        this.dateOfPayment = dateOfPayment;
    }

    // Getter for amount
    public double getAmount() {
        return amount;
    }

    // Method to calculate and return the total amount with discount and tax
    public double calcAmount(Booking booking, double baseAmount, double specialDiscount) {
        double discount, discountRate, discountedAmount, tax;
        if (specialDiscount == 0) {
            if (booking instanceof FamilyApartment) {
                discountRate = 15;// 15% discount for Families
                tax = 5 / 100.0;// only 5% tax for Families
            } else {
                discountRate = 0; // no discount for singles
                tax = 10.0 / 100; // 10% tax for singles
            }
            discount = baseAmount * discountRate / 100.0;
            discountedAmount = baseAmount - discount;
            tax *= discountedAmount;
            this.amount = discountedAmount + tax;
        } else {
            discount = baseAmount * specialDiscount / 100.0;
            discountedAmount = baseAmount - discount;
            this.amount = discountedAmount;
        }
        return this.amount;
    }

    // Getter for dateOfPayment
    public String getDate() {
        return dateOfPayment;
    }

    // Setter for dateOfPayment
    public void setDate(int month, int day) {
        this.dateOfPayment = "2024/" + month + "/" + day;
    }
}

class CreditCard extends Payment {
    private String cardNo;
    private String cardPassword;

    // Parameterized constructor
    public CreditCard(double amount, String dateOfPayment, String cardNo, String cardPassword) {
        super(amount, dateOfPayment);
        this.cardNo = cardNo;
        this.cardPassword = cardPassword;
    }

    // Getter and setter for cardNo
    public String getCardNo() {
        return cardNo;
    }

    public void setCardNo(String cardNo) {
        this.cardNo = cardNo;
    }

    // Getter and setter for cardPassword
    public String getCardPassword() {
        return cardPassword;
    }

    public void setCardPassword(String cardPassword) {
        int intPassword=Integer.parseInt(cardPassword);
        if (intPassword<=9999 && intPassword>=1000) {
            this.cardPassword = cardPassword;
        }
        else {
            System.out.println("Wrong password.");
            return;
        }
    }

    // Method to display a message (e.g., payment confirmation)
    public void message() {
        System.out.println("Payment processed using Credit Card ending with " + cardNo.substring(cardNo.length() - 4) + " was successful with total amount = " + this.getAmount() + " including tax.");
    }
}

class Cash extends Payment {
    private String paymentDueDate;

    // Parameterized constructor
    public Cash(double amount) {
        calcAmount(booking, amount);//fixME EE AAAAAAAAAAAAAAAAAAAA
    }

    // Setter for paymentDueDate
    public void setDueDate(int day, int month) {
        this.paymentDueDate = "2024/"+month + "/" + day;
    }

    // Getter for paymentDueDate
    public String getDueDate() {
        return paymentDueDate;
    }

    // Method to display a message related to the cash payment
    public void message() {
        System.out.println("Please ensure that the payment is made before the due date: "+paymentDueDate+" to confirm your booking.");
    }
}
